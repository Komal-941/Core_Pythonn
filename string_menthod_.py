# -*- coding: utf-8 -*-
"""String menthod .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Komal-941/Core_Pythonn/blob/main/String%20menthod%20.ipynb

# String Method

**1.str.upper()**
- Return a copy of string in all upper case characters (applicable only on text  i.e., string)
"""

s="hello"
s.upper()

"""**2.str.lower()**
- Return a copy of string in all lower case characters (applicable only on text i.e., string )
"""

x= "WORLD"
x.lower()

"""**3.str.swapcase**
- will convert the existing characters to the oppo. upper case -->lower case 7 vise versa
"""

x= "Hello WRORLD"
x.swapcase()

"""**4.str.capitalize**
- the first letter will be capital and remaining as lower
"""

d="day is tuesday"
d.capitalize()

f= "-hello World"
f.capitalize()

"""**5.str.title**
- first letter of each word will be Capitalized
"""

g="good Morning"
g.title()

"""**6.str.istitle**
- will check the given string suit as title  means will check wether the first letter of evry word is in Upper case
- Output will be in a Boolean data type

"""

h1= "it was  a Great day"
h1.istitle()

h2= "It Was A Magical Day"
h2.istitle()

"""**7.str.strip**
- if at the start(leading) and at end(trailing) space is there ; it will get removed ; both side spaces remove
"""

i=" it's really good!  "
i.strip()

""" **i]str.lstrp**
- will check for th espace at LHS only
"""

j="  Space  "
j.lstrip()

"""**ii]str.rstrp**
- will check for the space ata RHS only
"""

k="  Space  "
j.rstrip()

"""**8.str.removeprefix()**
- if wanna remove some letters or numbers or any special character  from starting(leading)
- whatever the data need to remove from start need to mention it in a bracket
- if the mentioned vaalue is not at the starting of string it will print all the string as it is
"""

k2="123Python programming"
k2.removeprefix("123")

"""**9.str.removesuffix**
- if wanna remove some letters or numbers or any special character from endng(leading)
- whatever the data need to remove from end need to mention it in a bracket
- if the mentioned vaalue is not at the ending of string it will print all the string as it is
"""

k7="Python programming12//"
k7.removesuffix("2//")

"""**10.str.replace**
- Returns a copy of replaced string as new object and delete the last one
- Ids will be different as after modifying  new object is created
"""

o="Good Morning"
print(o)

o= o.replace("Good","Bad")
print(o)

o1 = " komal@091"
print(o1)
id(o1)

o1=o1.replace("@","#")
print(o1)
id(o1)                        #after replacing it will create a new id

"""**11.str.split**
- it wil split the one string into multiple string
- if we did not mentioned delimiter(,,.,:,/) , by deafult it will take space as delimiter
"""

p= "My name is , Komal"             #whole string will split
p.split()

p1="My name is , @Komal"               #string will split as per the condn only (i.e, ,)
p1.split(",")

"""**12.str.join()**
- to Join the list of strings as one
"""

q="Komal","Sopan","Shelar"
(":").join(q)

q2 = "KomalShelar941"
"-".join(q2)

"""**13.str.index**
- will give the index number for the value searched for (first letters index number only)
- will throw a error if value not found
"""

r= 'python is very very easy '
r.index("very")

r.index("sy")

r.index("isvery")         #will search for exact value mentioned

"""**14.str.find()**
- will give the index number for the value searched for (first letters index number only)
- if the value not found will give output as -1
"""

s="Its easy to learn"
s.find("easy")

s.find("py")

"""**15.str.count()**
- will give the count repeatative values
- if thevalue not found it will shows 0 as o/p
"""

t=("good good good morning")
t.count("od")

"""**16.str.startswith()**
- will give the boolean values if the given string starts as per mentioned
- if the values matched = True
- if the values doesn't match = False
"""

u= "941komal"
u.startswith("9")

u.startswith("k")

"""**17.str.endswith()**
- will give the boolean values if the given string ends as per mentioned
"""

v= "941komal"
v.endswith("al")

"""**18.str.isalnum()**
- retrun boolean values by checking wheter it contains alphates , numeric and special chara(including space)
- alphabates/ numbers/ both = True
- any special character present = False
"""

w= "KomalShelar"
w.isalnum()

"""**19.str.isalpha()**
- use to check if only alphabates are there
- only alphabates = True
- numbers or special characters are there = False
"""

x= "Komal.Shelar"
x.isalpha()

x= "KomalShelar"
x.isalpha()

"""**20.str.isdigit()**
- use to check if only numbers are there
"""

x= "KomalShel11ar"
x.isdigit()

x= "10050"
x.isdigit()

"""**21.str.islower**
- return boolean if mentioned values are in the lower case (numbers doesn't matter)
- all characters need to lower case then nd then it will shows True
"""

y="Komal7721"
y.islower()

y="komal7721"
y.islower()

"""**22.str.isupper**
- return boolean if mentioned values are in the upper case (numbers doesn't matter)
- all characters need to upper case then nd then it will shows True
"""

z="Komal7721"
z.isupper()

z="KOMAL7721"
z.isupper()

"""**23.str.isspaced**
- needs space only
"""

a1=" "
a1.isspace()

a1="dd "
a1.isspace()

