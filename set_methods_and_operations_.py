# -*- coding: utf-8 -*-
"""Set methods and Operations .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Komal-941/Core_Pythonn/blob/main/Set%20methods%20and%20Operations%20.ipynb

# Set Methods

**1.set.add()**
- add a single value only
"""

s ={1, 2, 2.5, 3, 4, 'Komal', 5, 7}
s.add(89)
print(s)

s.add("Shelar")
print(s)

"""**2.set.update()**
- adds muliple values
"""

s ={1, 2, 4, }                           #whille assigning multiple items need to assign them in a list
s.update(["Shelar", False , 8.4, 23])
print(s)

"""**3.set.discard()**
- used to removing particular value
- if mentioned value is out of set ; will show the set as it is
"""

s ={1, 2, 2.5, 3, 4, 7,8, "Komal"}
s.discard("Shelar")
print(s)

"""**4.set.remove()**
- used to removing perticular value
- if mentioned value is out of set ; will show the error.
"""

s ={1, 2, 2.5, 3, 4, 'Komal', 5, 7}
s.remove("Komal")
print(s)

"""**5.set.clear()**"""

s ={1, 2, 2.5, 3, 4, 'Komal', 5, 7}
del s

"""**6.set.copy()**
- will copy the object as a shell means, we can dupliacte but the changes in second object will not affect on first
- it create the sep object after copy.
"""

original_object ={1, 2, 2.5, 3, 4, 'Komal', 5, 7}
print(id(original_object))
new_object = s.copy()
print(new_object)
print(id(new_object))

new_object.add(23)              # will ad the value in new object only
print(new_object)

print(original_object)                 # original object will remain the same

"""# Set Operations

**1.set.union()**
- just concetanation it will add the elements of set but not using + sign
- unique elemts will considered only not the duplicate ones
"""

a ={2,4,6,8}
b = {4,5,6,7,8}
c= a.union(b)
print(c)

"""**2.set.intersection()**
- it will create a new objcet with  common elements of both set
- items will consider for onces only.
"""

a ={2,4,6,8}
b = {4,5,6,7,8}
c= a.intersection(b)
print(c)

"""**3.set.isdisjoint()**
- returns boolean value if set are having intersection or not. (common elements in between)
- no intersection --> True
- intersection --> false
"""

s1 ={1,2,3}
s2 = {2,3,4,5}
s3={1,7,8,9}

s1.isdisjoint(s2)

s2.isdisjoint(s3)

s1.isdisjoint(s3)

"""**4.set.difference()**

- if there are comon elements between two sets and we wanna remove a common element from any one set
"""

s1 ={1,2,3}
s2 = {2,3,4,5}

print(s1-s2)
print(s2-s1)

s1 ={1,2,3,5,6}
s2 = {2,3,5,7,8}

print(s1-s2)
print(s2-s1)

"""**4.set.symmetric_difference()**

- returns new set of the element that are either of sets, but not in both (eleminate the common one )
"""

s1 ={1,2,3,5,6}
s2 = {2,3,5,7,8}

s1.symmetric_difference(s2)

s1 ={1,2,3,5,6}
s2 = {2,3,5,7,8}
print(s1)
print(s2)

s1.union(b) - s1.intersection(s2)

"""**5.issubset()**
- if all values in set1 are present in set2 then set1 is called as sub set  and set2 is super set.
- each value should be there in second set.
- if one set is subset other is superset always. but if there is no sub set then superset is also not there.
"""

s1 ={2,3,5}
s2 = {2,3,5,7,8}

ans1 = s1.issubset(s2)
print(ans1)

ans2 = s2.issubset(s1)
print(ans2)

"""**5.issuperset()**
- if all values in set1 are present in set2 then set1 is called as sub set  and set2 is super set.
- each value should be there in second set.
- if one set is subset other is superset always. but if there is no sub set then superset is also not there.
"""

s1 ={2,3,5}
s2 = {2,3,5,7,8}

ans1 = s1.issuperset(s2)
print(ans1)

ans2 = s2.issuperset(s1)
print(ans2)

